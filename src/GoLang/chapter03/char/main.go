package main

import "fmt"
func main(){

	//1基本介绍
		//Golang中没有专门的字符类型，如果要存储单个字符(字母)，一般使用byte来保存。
		//字符串就是一串固定长度的字符连接起来的字符序列。
		//Go的字符串是由单个字节连接起来的。
		//也就是说对于传统的字符串是由字符组成的，而Go的字符串不同，它是由字节组成的。

		var c1 byte = 'a' // int32
		var c2 byte = 'b' //uint8
		//当输出 byte 值 就是输出对应字符的码值
		fmt.Println("c1=",c1)
		fmt.Println("c2=",c2)
		//如果需要输出对应的字符  需要格式化输出
		fmt.Printf("c1=%c c2=%c \n",c1,c2)
		//如果输出汉字 会出现什么情况
		// var c3 byte = '毕' //overflow
		var c3 = '毕' //字符 在计算机内部按照utf-8的码值存储 
					  //如果将对应的码值输出为字符  %c
		fmt.Printf("c3=%c c3对应的码值=%d \n",c3,c3)  //%c 该值对应的unicode码值
		//如果我们保存的字符在ASCII表的,比如[0-1,a-z,A-Z..]直接可以保存到byte
		//如果我们保存的字符对应码值大于255,这时我们可以考虑使用int类型保存
		//如果我们需要安装字符的方式输出，这时我们需要格式化输出，即fmt.Printf(“%c”,c1)..


		// 英文字母-1个字节汉字-3个字节
		// 4)在Go中，字符的本质是一个整数，直接输出时，是该字符对应的UTF-8编码的码值。
		// 可以直接给某个变量赋一个数字，然后按格式化输出时%c，会输出该数字对应的unicode字符
		var c4 int = 27605 
		fmt.Printf("c4 = %c \n",c4)

		//6)字符类型是可以进行运算的，相当于一个整数，因为它都对应有Unicode码.
		var n1 = 10 + 'a'  //10 + 97
		fmt.Println("n1 = ",n1)


		//4 字符类型本质探讨
		//字符型存储到计算机中，需要将字符对应的码值（整数）找出来
		//	读取：二进制---->码值---->字符-->读取
		//	存储：字符--->对应码值---->二进制-->存储
		//2)字符和码值的对应关系是通过字符编码表决定的(是规定好)
		//3)Go语言的编码都统一成了utf-8。非常的方便，很统一，再也没有编码乱码的困扰了
}